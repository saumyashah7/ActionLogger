#!/bin/bash

#set -e
#set -x

# This script performs profiling on the target program and launches the memAdvisor.cpp program to generate reports
# Usage:
#	Script is called from icat main launch script. Can also be called directly.
#	bash mem_mode.sh progName pathToProg progArgs

prog=$1
DIR=$2
progargs=${@:3}

#echo "the current path n mem_mode_mpi.sh is: "
#pwd

#find out how long it takes to run the application - this is highly sub-optimal - will revisit this later to combine getting memory usage and the time-taken data

/usr/bin/time --format='(TimeTakeninSec=%e, %Xtext+%Ddata, MaxMeminKB=%M, NumOfFileSystemIP=%I, NumOfFileSystemOP=%O)' ibrun -np 2 $DIR/$prog , $progargs 2&> $ICAT_PATH/logs/mem.tmp

runtime="$(grep "TimeTakeninSec" $ICAT_PATH/logs/mem.tmp| awk '{print $1;}' | cut -d = -f2| cut -d , -f1)"

mem="$(grep "MaxMeminKB" $ICAT_PATH/logs/mem.tmp| awk '{print $3;}' | cut -d = -f2| cut -d , -f1)"

printf "%d \n" $mem > $ICAT_PATH/logs/${prog}_data.txt


#ibrun -np 2 $DIR/$prog $progargs 2>&1 > /dev/null
#not sure if we need the sleep command below or not

sleep 5

testTrap()
{
 echo "runtime_belowMin or process is being backgrounded or background process trying to read."
 ps ajfx| grep rauta| grep -v grep
 mainProcId=`pgrep -f all_mode.sh|head -1`
 echo $mainProcId > readProcId.txt
 #pgrep -f "all_mode.sh"|  xargs kill -SIGCONT
 #kill -SIGCONT $testid
 #ps ajfx| grep rauta| grep -v grep
 exit
 #trap - SIGTTIN 
}
trap 'testTrap' SIGTTIN SIGINT SIGTERM

if [ "$runtime" -le 0.5 ]
then
    echo "ERROR: Application runtime ${runtime} too short to profile."
    echo " "
    exit
fi

#launch vtune to find partitionable data if the memory usage is >= 16GB
#the file $prog_data.txt is generated by running profile.sh. However, for MPI programs profile.sh is not run, and this file is generated using the time command


if [ "$mem" -ge 16777216 ]; then #16777216 KB == 16 GB; use smaller tmp num for testing purposes- e.g., 16 in place of 16777216
  ml vtune

  #the following path would need to be updated with an upgrade in Vtune version
  #source /opt/apps/intel/13/vtune_amplifier_xe_2013/amplxe-vars.sh  
  #source /opt/intel/vtune_amplifier_xe_2016.4.0.470476/amplxe-vars.sh
  #source /opt/intel/vtune_amplifier_xe_2017.3.0.510739/amplxe-vars.sh
  source /opt/intel/vtune_amplifier_xe_2017.4.0.518798/amplxe-vars.sh 

  ibrun -np 2 amplxe-cl -c memory-access -knob analyze-mem-objects=true -trace-mpi -r ${prog}_vtune $DIR/$prog , $progargs > $ICAT_PATH/logs/vtune_${prog}.txt
  
  #ibrun -np 2 amplxe-cl -c memory-access -knob analyze-mem-objects=true -r ${prog}_vtune $DIR/$prog , $progargs > ./logs/vtune_${prog}.txt &
  #bash ibrun -np 2 amplxe-cl -c memory-access -knob analyze-mem-objects=true -r ${prog}_vtune $DIR/$prog , $progargs > ./logs/vtune_${prog}.txt
  
  amplxe-cl -report hotspots -group-by memory-object -S="L2 Miss Count" -r ${prog}_vtune.* > $ICAT_PATH/logs/${prog}_condensed_report.txt
  
  awk '!/Unknown/' ./logs/${prog}_condensed_report.txt | awk '!/Stack/' | awk '!/Memory/' | awk '!/--------/' | awk '{print $1 $2}' | sed -r 's/[:(]+/ /g' > $ICAT_PATH/logs/mObj.tmp
  awk '!seen[$0]++' ./logs/mObj.tmp > $ICAT_PATH/logs/memObj.tmp
  if [ ! -s "./logs/memObj.tmp" ]; then
    BWCfound="0" #file is empty
  else
    BWCfound="1" #file is not empty
  fi
  rm $ICAT_PATH/logs/mObj.tmp
else
  BWCfound="0"
fi

#process files: remove unneeded columns and lines from files
echo $runtime >> $ICAT_PATH/logs/${prog}_data.txt
echo $BWCfound >> $ICAT_PATH/logs/${prog}_data.txt

filename="memObj.txt"
if [ $BWCfound -ne 0 ]; then #if partitionable data found, include the srcfile and line number of the mem objects
  awk '{print $1,$2}' $ICAT_PATH/logs/memObj.tmp >> $ICAT_PATH/logs/memObj.txt
  while IFS='' read -r line 
  do
    echo $line >> $ICAT_PATH/logs/srcSnippet.txt
    srcfile="$(echo $line | awk '{print $1}')"
    linenum="$(echo $line | awk '{print $2}')"
    sed -n "${linenum}p" ${DIR}/${srcfile} >> $ICAT_PATH/logs/srcSnippet.txt
    echo " " >> $ICAT_PATH/logs/srcSnippet.txt 
  done < $ICAT_PATH/logs/$filename

  mv $ICAT_PATH/logs/srcSnippet.txt $ICAT_PATH/logs/${prog}_memObj.txt
  rm $ICAT_PATH/logs/memObj.txt
fi

cd ..
#launch memAdvisor program to generate reports
${dir_icat}memAdvisor $prog
cd icat
#clean up temp files
rm $ICAT_PATH/logs/mem.tmp
rm $ICAT_PATH/logs/memObj.tmp

#pwd

rm -rf $ICAT_PATH/${prog}_vtune*

